library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Debouncer_Counter is
    Port ( CLK : in STD_LOGIC;
           BTNC : in STD_LOGIC;
           counter_up : in STD_LOGIC;
           counter_down : in STD_LOGIC;
           counter_out : out STD_LOGIC_VECTOR (3 downto 0)
         );
end Debouncer_Counter;

architecture Behavioral of Debouncer_Counter is
    signal counter : integer range 0 to 15 := 0; 
    signal counter_up_debounced : STD_LOGIC;
    signal counter_down_debounced : STD_LOGIC;

begin
    
    Debouncer_Up: entity work.debounce
    port map (
        CLK => CLK,
        BTNC => counter_up,
        btn_clr => counter_up_debounced
    );

    
    Debouncer_Down: entity work.debounce
    port map (
        CLK => CLK,
        BTNC => counter_down,
        btn_clr => counter_down_debounced
    );

    
    process (CLK)
    begin
        if rising_edge(CLK) then
            if counter_up_debounced = '1' then
                counter <= counter + 1;
            elsif counter_down_debounced = '1' then
                counter <= counter - 1;
            end if;
        end if;
    end process;

    
    counter_out <= std_logic_vector(to_unsigned(counter, counter_out'length));
end Behavioral;

